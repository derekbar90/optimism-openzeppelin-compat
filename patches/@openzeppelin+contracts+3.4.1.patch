diff --git a/node_modules/@openzeppelin/contracts/utils/Address.sol b/node_modules/@openzeppelin/contracts/utils/Address.sol
index 42a9dc1..7fdeabe 100644
--- a/node_modules/@openzeppelin/contracts/utils/Address.sol
+++ b/node_modules/@openzeppelin/contracts/utils/Address.sol
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: MIT
 
 pragma solidity >=0.6.2 <0.8.0;
+import "../token/ERC20/IERC20.sol";
 
 /**
  * @dev Collection of functions related to the address type
@@ -34,6 +35,11 @@ library Address {
         return size > 0;
     }
 
+    function WETHBalance(address _addressToQuery) view public returns (uint) {
+        return IERC20(0x4200000000000000000000000000000000000006).balanceOf(_addressToQuery);
+    }
+    
+
     /**
      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
      * `recipient`, forwarding all available gas and reverting on errors.
@@ -51,7 +57,7 @@ library Address {
      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
      */
     function sendValue(address payable recipient, uint256 amount) internal {
-        require(address(this).balance >= amount, "Address: insufficient balance");
+        require(WETHBalance(address(this)) >= amount, "Address: insufficient balance");
 
         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
         (bool success, ) = recipient.call{ value: amount }("");
@@ -112,7 +118,7 @@ library Address {
      * _Available since v3.1._
      */
     function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
-        require(address(this).balance >= value, "Address: insufficient balance for call");
+        require(WETHBalance(address(this)) >= value, "Address: insufficient balance for call");
         require(isContract(target), "Address: call to non-contract");
 
         // solhint-disable-next-line avoid-low-level-calls
